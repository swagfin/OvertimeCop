@page "/Employees"
@inject EmployeeService Employeeservice
@attribute [Authorize]


<h3 class="ui header blue">Employees</h3>

<a class="ui button small primary" href="/Employees/Add"><i class="add icon"></i>Add Employee</a>



@if (allData == null)
{
    <LoadingSegment LoadingTitle="Retrieving Employees" />
}
else if (allData.Count() < 1)
{
    <MessageSegement Header="No Records Found" MessageType="warning" Message="Oops! It looks like there are no Employees" />
}
else
{
    <table class="ui table striped">
        <thead>
            <tr>
                <th>Full Name</th>
                <th>Person No</th>
                <th>Hourly Rate</th>
                <th>Department</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in allData)
            {
                <tr>
                    <td>@item.FullName</td>
                    <td>@item.PersonNo</td>
                    <td>@item.HourlyRate</td>
                    <td>
                        @if (item.Department == null)
                        {
                            <span>No Department</span>
                        }
                        else
                        {
                            <span>@item.Department.Name</span>
                        }
                    </td>
                    <td>
                        <a class="ui small label blue" href="/Employees/Edit/@item.Id">View</a>
                        <div class="ui small label orange" style="cursor:pointer" @onclick="(()=>ConfirmDelete(item.Id))">Delete</div>
                    </td>
                </tr>
            }
        </tbody>

    </table>
}


@code{
    IEnumerable<Employee> allData;

    protected override async Task OnInitializedAsync()
    {
        //Await
        allData = await Employeeservice.GetAllAsync();
    }

    private async void ConfirmDelete(int Id)
    {
        try
        {
            bool jsConfirmed = await js.InvokeAsync<bool>
                ("confirm", "Are you sure you want to Delete this Record ??");
            if (jsConfirmed)
            {
                await Employeeservice.RemoveAsync(Id);
                allData = await Employeeservice.GetAllAsync();
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            await js.InvokeVoidAsync("alert", "An Error Occurred while deleting this Record");
        }

    }

}
